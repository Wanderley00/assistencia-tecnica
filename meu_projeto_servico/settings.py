"""
Django settings for meu_projeto_servico project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from django.contrib.messages import constants as messages
from django.core.exceptions import ImproperlyConfigured
from pathlib import Path
from datetime import timedelta
import os
import dj_database_url
from django.conf import settings
from dotenv import load_dotenv

# Carrega as variáveis de ambiente do arquivo .env
load_dotenv()  # Esta linha deve estar ANTES de qualquer os.environ.get()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['assistencia-tecnica-django.onrender.com', '127.0.0.1', '*']


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'servico_campo',
    'servico_campo.templatetags',
    'configuracoes',
    'storages',
    'api',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_rest_passwordreset'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meu_projeto_servico.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'servico_campo.context_processors.pending_counts_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'meu_projeto_servico.wsgi.application'

LOGIN_REDIRECT_URL = '/servico/dashboard/'  # Onde redirecionar após o login
LOGOUT_REDIRECT_URL = 'login'  # Onde redirecionar após o logout

# Ou use reverse_lazy para maior robustez: reverse_lazy('login')
LOGIN_URL = 'login'


EMAIL_BACKEND = 'servico_campo.mail_backends.DatabaseEmailBackend'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'
SERVER_EMAIL = 'webmaster@localhost'

# Opcional: Para controlar o comportamento de falha silenciosa em produção
EMAIL_FAIL_SILENTLY = True  # Mantenha como False para depuração, True para produção


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Se a variável de ambiente DATABASE_URL existir (geralmente setada pelo Render para Postgres)
if 'DATABASE_URL' in os.environ:
    # Usa dj_database_url para parsear a URL do PostgreSQL do Render
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600,  # Opcional: tempo máximo de vida da conexão em segundos
            ssl_require=True   # Importante para conexões seguras com o Render Postgres
        )
    }
    print("Usando PostgreSQL (DATABASE_URL do ambiente).")
else:
    # Configuração padrão para desenvolvimento local com SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("Usando SQLite (ambiente local ou DATABASE_URL não encontrada).")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-BR'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_L10N = True
USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),  # Para traduções do projeto como um todo
    # Embora o comando makemessages encontre apps automaticamente,
    # ter esta linha aqui ainda é útil para compilemessages e para o Django saber onde procurar.
    # Mas não é estritamente necessário apontar para 'servico_campo/locale' aqui, pois o makemessages já o fará.
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Configurações de armazenamento de arquivos (MEDIA e STATIC)
# Use S3 em produção ou se as variáveis AWS estiverem presentes (para testar S3 localmente)
# Use FileSystemStorage (pasta local) em desenvolvimento puro (DEBUG=True e sem vars AWS)

# Verifica se as variáveis AWS S3 estão configuradas no ambiente
AWS_S3_CONFIGURED = all([
    os.environ.get('AWS_ACCESS_KEY_ID'),
    os.environ.get('AWS_SECRET_ACCESS_KEY'),
    os.environ.get('AWS_STORAGE_BUCKET_NAME'),
    os.environ.get('AWS_S3_REGION_NAME')
])

if not AWS_S3_CONFIGURED and DEBUG:
    # Usar armazenamento local para mídia em desenvolvimento (se DEBUG=True e S3 não estiver configurado)
    print("Usando armazenamento de arquivos local (pasta media/).")
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
    # Você pode manter as configurações do S3 no settings.py, mas elas não serão ativas.
    # Para STORAGES, o "default" pode ser definido aqui também.
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

elif AWS_S3_CONFIGURED:
    # Usar AWS S3 para mídia (em produção ou para testes locais com S3 via .env)
    print("Usando armazenamento de arquivos AWS S3.")
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')

    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
    AWS_S3_FILE_OVERWRITE = False
    # Recomenda-se usar controle de acesso de bucket (Bucket Policy)
    AWS_DEFAULT_ACL = None

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }
else:
    # Caso de DEBUG=False e AWS_S3_CONFIGURED=False (situação de erro em produção)
    raise ImproperlyConfigured(
        "As configurações do AWS S3 são obrigatórias em produção.")


MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_AUTOREFRESH = True
WHITENOISE_MAX_AGE = 31536000

# Adicione este bloco no final do arquivo settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

SIMPLE_JWT = {
    # Define o tempo de vida do Access Token. 15 a 30 minutos é um valor seguro e comum.
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),

    # Define o tempo de vida do Refresh Token.
    # Para o seu caso de uso, 1 dia é um bom ponto de partida.
    # O técnico não precisará fazer login por um dia, a menos que saia do app.
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),

    # Permite que um novo Refresh Token seja enviado junto quando um Access Token é renovado.
    # Isso aumenta a segurança, pois os refresh tokens podem "rotacionar".
    "ROTATE_REFRESH_TOKENS": True,

    # Se um refresh token for usado, ele é colocado numa "lista negra".
    # Isso impede que um refresh token roubado seja usado mais de uma vez.
    "BLACKLIST_AFTER_ROTATION": True,

    "TOKEN_OBTAIN_SERIALIZER": "api.serializers.MyTokenObtainPairSerializer",

    # ... outras configurações que você possa ter ...
}
